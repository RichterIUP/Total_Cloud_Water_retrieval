#!/usr/bin/python
'''@package docstring
Control variables for the retrieval
'''
import os
import numpy as np

# File format of input

# Input of radiance file can be OPUS or NC
RAD_INP = 'NC'

# Input of atmosphere can be RASO or ERA5
ATM_INP = 'RASO'

# Ipnut of cloud information can be NC or ASCII
CLD_INP = 'NC'

# If input of radiance is OPUS, position must be specified here
LAT = 78.92
LON = 11.92

# Path to the output of TCWret
PATH = os.getcwd() + '/OUTFOLDER'
RESULTS = os.getcwd() + '/RESULTS'

# Path to the binary of LBLRTM
PATH_TO_LBLRTM = "/home/phi.richter/radiative_transfer/lblrtm"
PATH_TO_RUN_LBLRTM = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/run_LBLRTM"

# Path to the binary of LBLDIS
PATH_TO_LBLDIS = "/home/phi.richter/radiative_transfer/lbldis"
PATH_TO_RUN_LBLDIS = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/run_LBLDIS"

# Path to the source of TCWret
PATH_TO_TCWRET = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/retrieval"

# Path to ftsreader
PATH_TO_FTSREADER = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/ftsreader"

# Microwindows used by TCWret
WINDOWS = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/retrieval/microwindows/mw_file"


# Resolution of the spectrum in cm-1. Calculate convolution according to the resolution
RESOLUTION = 0.3

# Initial parameter mu for the Levenberg-Marquardt-Algorithm.
LM_INIT = 1e2
INCREASE_LM = 4.0
DECREASE_LM = 2.0

# Minimum value for mu. The parameter won't go below this value.
LM_MIN = 0.0

# Standard deviation of the measured spectral radiances. If STDDEV is below 
# 0, then the STDDEV is read from the spectrum file. If it equals 0, then
# a non-weighted least squares algorithm is run. Positive values let L-IWP ignore
# the value from the spectrum file. If a testcase is retrieved, then positive
# values are the standard deviation of the added noise
STDDEV = -1.0

# Use scattering in LBLDIS?
SCATTER = True

# Disturb the cloud temperature, absolute value (K)
DISTURB_CTEMPERATURE = 0.0

# Disturb the humidity relative to the value from the radiosonde
SCALE_HUMIDITY = 1.0

# Add an offset to the spectrum (mW/[sr * m2 * cm-1])
OFFSET = -0.0

# Kurucz solar information
KURUCZ = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/solar/solar.kurucz.rad.1cm-1binned.full_disk.asc"

# Single scattering parameter dataases and temperature intervals. If cloud temperature 
# is outside the interval, the retrieval of the corresponding parameter will be deactivated
DATABASES = ['/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/ssp_database/ssp_db.mie_wat.gamma_sigma_0p100', \
'/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/ssp_database/ssp_db.Droxtal.gamma.0p100']
TEMP_DATABASES  = [[233.15, 500.15], [0.0, 273.15]]

# Optical depths
TAU = [0.25, 0.25]

# Effective Radii. Can either be absolute or logarithmic
REFF = [5., 20.]
LOG = False

MCP = np.array(TAU[:]+REFF[:])

# The a priori for the optimal estimation inversion. By default, the a priori equals the first guess MCP
MCP_APRIORI = MCP[:]

# The variance of the a priori and its weighting. This will be converted to the S_A matrix

VARIANCE_APRIORI_TAU = [0.04, 0.04]
VARIANCE_APRIORI_REFF = [100.0**(-2), 100.0**(-2)]

VARIANCE_APRIORI = np.array(VARIANCE_APRIORI_TAU[:] + VARIANCE_APRIORI_REFF[:])

# Manual choise of the cloud thresholds (in m). If TCWret should use the cloud thresholds from the file, these have to be set to None, otherwise CLOUD_LAYERS must be a list (not np.array)
CLOUD_LAYERS = None

# If multiple layers available, only use cloud base height or cloud top height
ONLY_CLOUD_BASE = False
ONLY_CLOUD_TOP = False

# Surface emissivity: [wavenumber, emissivity] 
EMISSIVITY = [[100., 0.98], [700., 0.98], [800., 0.98], [3000, 0.98]]

# Maximum number of iterations
MAX_ITER = 30

# Stop iteration if change of cost function is less than CONVERGENCE
CONVERGENCE = 1e-3

# Trace gas profiles in ppmv
path_tg = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/retrieval/trace_gases/"
CO2_FILE = path_tg + "co2.csv"
CO_FILE = path_tg + "co.csv"
CH4_FILE = path_tg + "ch4.csv"
N2O_FILE = path_tg + "n2o.csv"
O3_FILE = path_tg + "o3.csv"
O2_FILE = path_tg + "o2.csv"
HEIGHT_FILE = path_tg + "z.csv"

# Maximum allowed effective droplet radius
MAX_REFF = 100.0

# Minimum allowed effective droplet radius
MIN_REFF = 1.0

# If the spectra are calibrated with emissivity = 1, it can be recalibrated
RECALIBRATE = True
FILE_EMISS = "/home/phi.richter/Data/PASCAL_SiPCA_FRAM_2017/bb_emissivity.csv"
FILE_TEMP = "/home/phi.richter/Data/PASCAL_SiPCA_FRAM_2017/temperature_lab.csv"

# Altitude grid if the input grid has too many layers
ALTITUDE_GRID = "/home/phi.richter/retrieval_recode/Total_Cloud_Water_retrieval/retrieval/grids/red_grid"

# Keys for ERA5 quantities. Time unit is either hours since 1900-01-01 (then TIME_UNIT=[1900,3600]) or seconds since 1970-01-01 (them TIME_UNIT = [1970, 1])
KEY_RH = "r"
KEY_TEMP= "t"
KEY_HEIGHT = "z"
TIME_UNIT = [1900, 3600]
